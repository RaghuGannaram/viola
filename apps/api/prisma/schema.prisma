generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_URL")
}

enum ReactionEmoji {
    LIKE
    FIRE
    HEART
    CLAP
}

model User {
    id            String           @id @default(uuid()) @db.Uuid
    email         String           @unique
    username      String           @unique
    password      String
    authProvider  String           @default("viola")
    providerId    String?
    avatarUrl     String           @default("defaultAvatar.png")
    verified      Boolean          @default(false)
    premium       Boolean          @default(false)
    role          String           @default("member")
    settings      Json             @default("{}")
    createdAt     DateTime         @default(now()) @db.Timestamptz(6)
    lastLoginAt   DateTime?        @db.Timestamptz(6)
    // relationships
    artistProfile Artist?          @relation("UserArtistProfile")
    playlists     Playlist[]       @relation("CreatedPlaylists")
    savedAlbums   AlbumBookmark[]
    savedArtists  ArtistBookmark[]
    playbackLog   PlaybackLog[]
    reactions     Reaction[]
    songs         Song[]           @relation("UserSongs")
}

model Artist {
    id                String           @id @default(uuid()) @db.Uuid
    name              String           @unique
    bio               String?
    imageUrl          String?
    externalLinks     Json             @default("{}")
    createdAt         DateTime         @default(now()) @db.Timestamptz(6)
    userId            String?          @unique @db.Uuid
    // relationships
    userAccount       User?            @relation("UserArtistProfile", fields: [userId], references: [id], onDelete: SetNull)
    creditedSongs     Credit[]
    contributedAlbums Contribution[]
    savedBy           ArtistBookmark[]
}

model Song {
    id          String        @id @default(uuid()) @db.Uuid
    title       String
    duration    Int?
    trackNumber Int?
    lyrics      String?
    audioUrl    String
    coverUrl    String        @default("defaultCover.png")
    albumId     String?       @db.Uuid
    userId      String        @db.Uuid
    createdAt   DateTime      @default(now()) @db.Timestamptz(6)
    // relationships
    user        User          @relation("UserSongs", fields: [userId], references: [id], onDelete: Restrict)
    album       Album?        @relation("AlbumSongs", fields: [albumId], references: [id], onDelete: SetNull)
    playlists   Curation[]
    artists     Credit[]
    playbackLog PlaybackLog[]
    reactions   Reaction[]
}

model Album {
    id          String          @id @default(uuid()) @db.Uuid
    title       String          @unique
    description String?
    releaseDate DateTime?
    coverUrl    String?
    createdAt   DateTime        @default(now()) @db.Timestamptz(6)
    // relationships
    songs       Song[]          @relation("AlbumSongs")
    artists     Contribution[]
    savedBy     AlbumBookmark[]
}

model Playlist {
    id        String     @id @default(uuid()) @db.Uuid
    userId    String     @db.Uuid
    name      String
    isPublic  Boolean    @default(false)
    createdAt DateTime   @default(now()) @db.Timestamptz(6)
    // relationships
    user      User       @relation("CreatedPlaylists", fields: [userId], references: [id], onDelete: Cascade)
    songs     Curation[]
}

model Contribution {
    albumId  String @db.Uuid
    artistId String @db.Uuid
    // relationships
    album    Album  @relation(fields: [albumId], references: [id], onDelete: Cascade)
    artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)

    @@id([albumId, artistId])
}

model Credit {
    songId   String @db.Uuid
    artistId String @db.Uuid
    // relationships
    song     Song   @relation(fields: [songId], references: [id], onDelete: Cascade)
    artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)

    @@id([songId, artistId])
}

model Curation {
    playlistId String   @db.Uuid
    songId     String   @db.Uuid
    position   Int
    // relationships
    playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    song       Song     @relation(fields: [songId], references: [id], onDelete: Cascade)

    @@id([playlistId, songId])
}

model Reaction {
    userId    String        @db.Uuid
    songId    String        @db.Uuid
    emoji     ReactionEmoji
    reactedAt DateTime      @default(now()) @db.Timestamptz(6)
    // relationships
    user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    song      Song          @relation(fields: [songId], references: [id], onDelete: Cascade)

    @@id([userId, songId, emoji])
}

model PlaybackLog {
    id       String   @id @default(uuid()) @db.Uuid
    userId   String   @db.Uuid
    songId   String   @db.Uuid
    playedAt DateTime @default(now()) @db.Timestamptz(6)
    // relationships
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    song     Song     @relation(fields: [songId], references: [id], onDelete: Cascade)
}

model AlbumBookmark {
    userId  String @db.Uuid
    albumId String @db.Uuid
    // relationships
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    album   Album  @relation(fields: [albumId], references: [id], onDelete: Cascade)

    @@id([userId, albumId])
}

model ArtistBookmark {
    userId   String @db.Uuid
    artistId String @db.Uuid
    // relationships
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)

    @@id([userId, artistId])
}
